version: '3' # define o conjunto de funcionalidades do composer
volumes:
  dados:
networks: # para separar os serviços por redes de modo a bloquear acesso indevido
  banco:
  web:
  fila:
services: # aplicando a idéia de microservices
  db:
    image: postgres:9.6
    volumes:
      # Volume dos dados
      - dados:/var/lib/postgresql/data
      # Scripts
      # depois de levantar com docker-compose up -d se executar o script do postres poderá ver se está tudo ok
      # para executar os scripts: docker-compose exec db psql -U postgres -f /scrtips/check.sql
      - ./scripts:/scripts # para ter acesso aos scripts de dentro do container
      # É preciso inicializar o banco de dados com as tabelas e tudo por isso o Postgres possui uma documentação de inicialização
      # De acordo com a documentação do Postgres essa nomeclatura: /docker-entrypoint-initdb.d/
      # permite rodar scripts de inicialização do banco de dados
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - banco
  frontend:
    image: nginx:1.13
    volumes:
      # Site
      - ./web:/usr/share/nginx/html/ #para que o nginx encontre os arquivos que estão na pasta web
      # Configuração do proxy reverso
      # Dessa forma o cliente não sabe que está lidando com mais de um container, somente o frontend é acessível
      # aqui está mapeando um arquivo ao invés de um diretório, porcausa do redirecionamento das requisições da api
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 8000:80
    networks:
      - web
    depends_on: # orquestra a inicialização dos serviços
      - app
  app: #aplicativo que vai enfileirar os envios de email
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app #mapear o diretório para o container
    working_dir: /app #necessário para que o app inicie automaticamente
    command: bash ./app.sh #script necessário para instalar as bibliotecas da aplicação, e já inicializar a aplicação
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
    #environment: -> opção que foi removida por que será inserida no docker-composer.override
    # - DB_NAME=email_sender
  queue:
      image: redis:3.2
      networks:
        - fila
  worker:
    # o worker será escalável neste caso o comando de up composer será:
    # docker-compose up -d --scale worker=3
    build: worker # dize para o compose buscar o Dockerfile dentro da pasta worker
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: worker.py
    networks:
      - fila
    depends_on:
      - queue
